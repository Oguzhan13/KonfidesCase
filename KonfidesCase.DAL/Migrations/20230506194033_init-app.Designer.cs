// <auto-generated />
using System;
using KonfidesCase.DAL.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KonfidesCase.DAL.Migrations
{
    [DbContext(typeof(KonfidesCaseDbContext))]
    [Migration("20230506194033_init-app")]
    partial class Initapp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KonfidesCase.Entity.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("Etkinlik Tarihi")
                        .HasColumnOrder(5);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Adres")
                        .HasColumnOrder(7);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("Kategori Id")
                        .HasColumnOrder(9);

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("Şehir Id")
                        .HasColumnOrder(10);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Açıklama")
                        .HasColumnOrder(4);

                    b.Property<bool?>("IsConfirm")
                        .HasColumnType("bit")
                        .HasColumnName("Onay")
                        .HasColumnOrder(8);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Ad")
                        .HasColumnOrder(3);

                    b.Property<string>("Organizer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Organizatör")
                        .HasColumnOrder(2);

                    b.Property<string>("Quota")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Kontenjan")
                        .HasColumnOrder(6);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.ToTable("Etkinlikler", (string)null);
                });

            modelBuilder.Entity("KonfidesCase.Entity.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Mail Adresi")
                        .HasColumnOrder(5);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Ad")
                        .HasColumnOrder(3);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Soyad")
                        .HasColumnOrder(4);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Rol")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Kullanıcılar", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e7fe5c6-1444-474b-9b43-d078cd892237"),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            LastName = "Manager",
                            RoleName = "admin"
                        });
                });

            modelBuilder.Entity("KonfidesCase.Entity.Entities.AppUserActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActivityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Etkinlik Id")
                        .HasColumnOrder(2);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Kullanıcı Id")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("Kullanıcı-Etkinlik", (string)null);
                });

            modelBuilder.Entity("KonfidesCase.Entity.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Ad")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Kategoriler", (string)null);
                });

            modelBuilder.Entity("KonfidesCase.Entity.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Ad")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Şehirler", (string)null);
                });

            modelBuilder.Entity("KonfidesCase.Entity.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("ActivityId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(4);

                    b.Property<string>("TicketNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Bilet Numarası")
                        .HasColumnOrder(2);

                    b.Property<Guid?>("UserId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("Biletler", (string)null);
                });

            modelBuilder.Entity("KonfidesCase.Entity.Entities.Activity", b =>
                {
                    b.HasOne("KonfidesCase.Entity.Entities.Category", "Category")
                        .WithMany("Activities")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KonfidesCase.Entity.Entities.City", "City")
                        .WithMany("Activities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");
                });

            modelBuilder.Entity("KonfidesCase.Entity.Entities.AppUserActivity", b =>
                {
                    b.HasOne("KonfidesCase.Entity.Entities.Activity", "Activity")
                        .WithMany("AttendedUsers")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KonfidesCase.Entity.Entities.AppUser", "User")
                        .WithMany("Activities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KonfidesCase.Entity.Entities.Ticket", b =>
                {
                    b.HasOne("KonfidesCase.Entity.Entities.Activity", "Activity")
                        .WithMany("Tickets")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KonfidesCase.Entity.Entities.AppUser", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KonfidesCase.Entity.Entities.Activity", b =>
                {
                    b.Navigation("AttendedUsers");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("KonfidesCase.Entity.Entities.AppUser", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("KonfidesCase.Entity.Entities.Category", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("KonfidesCase.Entity.Entities.City", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
